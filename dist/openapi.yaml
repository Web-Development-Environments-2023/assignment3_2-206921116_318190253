openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /recipes/complexSearch:
    get:
      tags:
        - Recipes
      summary: Search recipes
      description: |
        Retrieve a list of recipes that match the search query and filters.
        If the user is logged in, the last search query will be used as the default search query.
      parameters:
        - name: recepieName
          in: query
          description: The search query to match against recipe names.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of recipes to retrieve.
          required: false
          schema:
            type: integer
            enum: [5, 10, 15]
            default: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        '404':
          description: No recipes found
  /recipes/full/:recipeId: 
    get:
      tags:
        - recipes
      summary: Return full details on recipe by his ID
      responses:
        "200":
          description: full details of the recipe are returned
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/recipeDetails'
        '404':
          description: Recipe not found

  /users/getmyrecipe:
    get:
      tags:
        - Users
      summary: get the details of a recipe this user has created in the past by ID of the recipe
      responses:
        "200":
          description: data about the recipe with the given ID has returned
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: recipe ID for this user's recipes doesn't exist
  /users/MyfamilyRecipes:
    get:
      tags: 
        - Users
      summary: get all family recipes of the current user
      responses:
        "200":
          description: data about all family recipes of the current user has returned
  /users/lastSearch:
    post:
      tags:
        - Users
      summary: update the last search the was done by the current user in the DB
      responses:
        "200":
          description: the last search in the DB for the current user is updated, the prior last search no longer appears
        "401":
          description: user has no last search
  /users/addUserRecipe:
    post:
      tags:
        - Users
      summary: create a new recipe according to the user's definitions
      responses:
        "200":
          description: a new recipe was created with a new row in the DB with the details
  /users/viewed:
    get:
      tags:
        - Users
      summary: get the last 3 recipes this user has viewed
      responses:
        "200":
          description: the IDs of the 3 recipes the user has last viewed is returned
                    content:
            application/json:
              schema:
                type: array
                items: Integer
        "401":
          description: user has no last views
    post:
      tags:
      - Users
      summary: update the last viewed page of the user
      responses:
        "200":
          description: the last viewed page of the current user is updated in the DB, the 3rd page prior to the addition is now deleted from last viewed for this user
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
  /recipes/random:
  get:
    tags:
      - Recipes
    summary: Returns 3 random recipes from the data
    description: Returns an array of 3 random recipes from the data
    responses:
      "200":
        description: Data about the recipes
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RecipePreview'
      "500":
        description: Internal Server Error

components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    recipeExtra:
      type: object
      properties:
        ingredients:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              amount:
                type: integer
        instructions:
          type: array
          items:
            type: string
        servings:
          type: integer
    recipeDetails:
      allOf:
        - $ref: '#/components/schemas/recipeReview'
        - $ref: '#/components/schemas/recipeExtra'
